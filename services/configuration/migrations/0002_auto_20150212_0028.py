# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.core.validators
import django_countries.fields


class Migration(migrations.Migration):

    dependencies = [
        ('configuration', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='availabilityrule',
            name='ending_date',
            field=models.DateField(verbose_name='Ending date for an availability period'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityrule',
            name='gs_channel',
            field=models.ForeignKey(to='configuration.GroundStationChannel', verbose_name='Channel that this rule belongs to.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityrule',
            name='operation',
            field=models.CharField(verbose_name='Operation that this rule defines', max_length=1, choices=[('+', 'Operation for adding new slots'), ('-', 'Operation for removing existing slots')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityrule',
            name='periodicity',
            field=models.CharField(verbose_name='Period of time that this rule occurs.', max_length=1, choices=[('O', 'Rule that occurs only once.'), ('D', 'Rule that defines daily repetition pattern.'), ('W', 'Rule that defines a weekly repetition pattern.')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityrule',
            name='starting_date',
            field=models.DateField(verbose_name='Starting date for an availability period'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruledaily',
            name='ending_time',
            field=models.TimeField(verbose_name='Ending time for a daily period.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruledaily',
            name='starting_time',
            field=models.TimeField(verbose_name='Starting time for a daily period.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleonce',
            name='ending_time',
            field=models.TimeField(verbose_name='Ending date and time for the rule.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleonce',
            name='starting_time',
            field=models.TimeField(verbose_name='Beginning date and time for the rule.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='friday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Friday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='friday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Friday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='monday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Monday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='monday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Monday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='saturday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Saturday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='saturday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Saturday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='sunday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Sunday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='sunday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Sunday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='thursday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Thursday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='thursday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Thursday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='tuesday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Tuesday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='tuesday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Tuesday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='wednesday_ending_time',
            field=models.TimeField(verbose_name='Ending time on this Wednesday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityruleweekly',
            name='wednesday_starting_time',
            field=models.TimeField(verbose_name='Starting time on Wednesday.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityslot',
            name='end',
            field=models.DateTimeField(verbose_name='Slot end'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityslot',
            name='groundstation_channel',
            field=models.ForeignKey(to='configuration.GroundStationChannel', verbose_name='GroundStationChannel that this slot belongs to'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityslot',
            name='identifier',
            field=models.CharField(unique=True, max_length=100, verbose_name='Unique identifier for this slot'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availabilityslot',
            name='start',
            field=models.DateTimeField(verbose_name='Slot start'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='AMSAT_letter',
            field=models.CharField(max_length=4, verbose_name='AMSAT Letter'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='IARU_allocation_maximum_frequency',
            field=models.DecimalField(decimal_places=6, max_digits=24, verbose_name='Maximum frequency (MHz)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='IARU_allocation_minimum_frequency',
            field=models.DecimalField(decimal_places=6, max_digits=24, verbose_name='Minimum frequency (MHz)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='IARU_band',
            field=models.CharField(max_length=6, verbose_name='IARU Band'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='IARU_range',
            field=models.CharField(max_length=4, verbose_name='IARU Range'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='downlink',
            field=models.BooleanField(default=False, verbose_name='Downlink permitted'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebands',
            name='uplink',
            field=models.BooleanField(default=False, verbose_name='Uplink permitted'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebandwidths',
            name='bandwidth',
            field=models.DecimalField(decimal_places=9, max_digits=24, verbose_name='Bandwidth (kHz)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablebitrates',
            name='bitrate',
            field=models.IntegerField(verbose_name='Bitrate (bps)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablemodulations',
            name='modulation',
            field=models.CharField(max_length=9, verbose_name='Modulation'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='availablepolarizations',
            name='polarization',
            field=models.CharField(verbose_name='Polarization modes', max_length=10, choices=[('Any', 'Any polarization type'), ('RHCP', 'RHCP polarization'), ('LHCP', 'LHCP polarization')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='channelcompatibility',
            name='groundstation_channels',
            field=models.ManyToManyField(to='configuration.GroundStationChannel', verbose_name='Reference to all the compatible GroundStation channels.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='channelcompatibility',
            name='spacecraft_channel',
            field=models.ForeignKey(to='configuration.SpacecraftChannel', verbose_name='Reference to the compatible Spacecraft channel.'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='IARU_region',
            field=models.SmallIntegerField(verbose_name='IARU region identifier'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='altitude',
            field=models.FloatField(verbose_name='Altitude of the Ground Station'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='callsign',
            field=models.CharField(max_length=10, verbose_name='Radio amateur callsign for this GroundStation', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\-_]*$', code='invalid_callsign')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='channels',
            field=models.ManyToManyField(to='configuration.GroundStationChannel', verbose_name='Communication channels that belong to this GroundStation'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='contact_elevation',
            field=models.FloatField(verbose_name='Minimum elevation for contact(degrees)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='country',
            field=django_countries.fields.CountryField(verbose_name='Country where the GroundStation is located', max_length=2),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='identifier',
            field=models.CharField(unique=True, max_length=30, verbose_name='Unique alphanumeric identifier for this GroundStation', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\-_]*$', code='invalid_spacecraft_identifier')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='is_automatic',
            field=models.BooleanField(default=False, verbose_name='Flag that defines this GroundStation as a fully automated one,so that it will automatically accept any operation request from a remote Spacecraft operator'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='latitude',
            field=models.FloatField(verbose_name='Latitude of the Ground Station'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='longitude',
            field=models.FloatField(verbose_name='Longitude of the Ground Station'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstation',
            name='user',
            field=models.ForeignKey(to='accounts.UserProfile', verbose_name='User to which this GroundStation belongs to'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstationchannel',
            name='automated',
            field=models.BooleanField(default=False, verbose_name='Defines this channel as fully automated'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstationchannel',
            name='enabled',
            field=models.BooleanField(default=True, verbose_name='Enables the usage of this channel'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='groundstationchannel',
            name='identifier',
            field=models.CharField(unique=True, max_length=30, verbose_name='Unique identifier', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.-_]*$', code='invalid_channel_identifier')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='callsign',
            field=models.CharField(max_length=10, verbose_name='Radio amateur callsign', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\-_]*$', code='invalid_callsign')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='channels',
            field=models.ManyToManyField(to='configuration.SpacecraftChannel', verbose_name='Available spacecraft communications channels'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='identifier',
            field=models.CharField(unique=True, max_length=30, verbose_name='Identifier', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\-_]*$', code='invalid_spacecraft_identifier')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='is_cluster',
            field=models.BooleanField(default=False, verbose_name='Flag that indicates whether this object is a cluster or not'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='is_ufo',
            field=models.BooleanField(default=False, verbose_name='Flag that defines whether this object is an UFO or not'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='tle',
            field=models.ForeignKey(to='configuration.TwoLineElement', verbose_name='TLE object for this Spacecraft'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraft',
            name='user',
            field=models.ForeignKey(to='accounts.UserProfile', verbose_name='Owner of the Spacecraft'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraftchannel',
            name='enabled',
            field=models.BooleanField(default=True, verbose_name='Enables the usage of this channel'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraftchannel',
            name='frequency',
            field=models.DecimalField(decimal_places=3, max_digits=15, verbose_name='Central frequency (Hz)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='spacecraftchannel',
            name='identifier',
            field=models.CharField(unique=True, max_length=30, verbose_name='Unique identifier', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.-_]*$', code='invalid_channel_identifier')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='twolineelement',
            name='first_line',
            field=models.CharField(max_length=69, verbose_name='First line of this TLE', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\s-]{69}$', code='invalid_tle_line_1')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='twolineelement',
            name='identifier',
            field=models.CharField(unique=True, max_length=24, verbose_name='Identifier of the spacecraft that this TLE element models (line 0)'),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='twolineelement',
            name='second_line',
            field=models.CharField(max_length=69, verbose_name='Second line of this TLE', validators=[django.core.validators.RegexValidator(message="Alphanumeric or '.-_' required", regex='^[a-zA-Z0-9.\\s-]{69}$', code='invalid_tle_line_2')]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='twolineelement',
            name='source',
            field=models.TextField(max_length=100, verbose_name='String that indicates the source of this TLE', validators=[django.core.validators.URLValidator()]),
            preserve_default=True,
        ),
        migrations.AlterField(
            model_name='twolineelement',
            name='timestamp',
            field=models.BigIntegerField(verbose_name='Timestamp with the update date for this TLE'),
            preserve_default=True,
        ),
    ]
