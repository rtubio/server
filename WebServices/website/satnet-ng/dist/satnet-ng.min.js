/*! satnet-ng 15-01-2015 */
angular.module("celestrak-services",[]),angular.module("celestrak-services").service("celestrak",[function(){"use strict";this.CELESTRAK_URL_BASE="http://celestrak.com/NORAD/elements/",this.CELESTRAK_SECTION_1="Weather & Earth Resources",this.CELESTRAK_WEATHER=this.CELESTRAK_URL_BASE+"weather.txt",this.CELESTRAK_NOAA=this.CELESTRAK_URL_BASE+"noaa.txt",this.CELESTRAK_GOES=this.CELESTRAK_URL_BASE+"goes.txt",this.CELESTRAK_EARTH_RESOURCES=this.CELESTRAK_URL_BASE+"resource.txt",this.CELESTRAK_SARSAT=this.CELESTRAK_URL_BASE+"sarsat.txt",this.CELESTRAK_DISASTER_MONITORING=this.CELESTRAK_URL_BASE+"dmc.txt",this.CELESTRAK_TRACKING_DATA_RELAY=this.CELESTRAK_URL_BASE+"tdrss.txt",this.CELESTRAK_ARGOS=this.CELESTRAK_URL_BASE+"argos.txt",this.CELESTRAK_SECTION_2="Communications",this.CELESTRAK_GEOSTATIONARY=this.CELESTRAK_URL_BASE+"geo.txt",this.CELESTRAK_INTELSAT=this.CELESTRAK_URL_BASE+"intelsat.txt",this.CELESTRAK_GORIZONT=this.CELESTRAK_URL_BASE+"gorizont.txt",this.CELESTRAK_RADUGA=this.CELESTRAK_URL_BASE+"raduga.txt",this.CELESTRAK_MOLNIYA=this.CELESTRAK_URL_BASE+"molniya.txt",this.CELESTRAK_IRIDIUM=this.CELESTRAK_URL_BASE+"iridium.txt",this.CELESTRAK_ORBCOMM=this.CELESTRAK_URL_BASE+"orbcomm.txt",this.CELESTRAK_GLOBALSTAR=this.CELESTRAK_URL_BASE+"globalstar.txt",this.CELESTRAK_AMATEUR_RADIO=this.CELESTRAK_URL_BASE+"amateur.txt",this.CELESTRAK_EXPERIMENTAL=this.CELESTRAK_URL_BASE+"x-comm.txt",this.CELESTRAK_COMMS_OTHER=this.CELESTRAK_URL_BASE+"other-comm.txt",this.CELESTRAK_SECTION_3="Navigation",this.CELESTRAK_GPS_OPERATIONAL=this.CELESTRAK_URL_BASE+"gps-ops.txt",this.CELESTRAK_GLONASS_OPERATIONAL=this.CELESTRAK_URL_BASE+"glo-ops.txt",this.CELESTRAK_GALILEO=this.CELESTRAK_URL_BASE+"galileo.txt",this.CELESTRAK_BEIDOU=this.CELESTRAK_URL_BASE+"beidou.txt",this.CELESTRAK_SATELLITE_AUGMENTATION=this.CELESTRAK_URL_BASE+"sbas.txt",this.CELESTRAK_NNSS=this.CELESTRAK_URL_BASE+"nnss.txt",this.CELESTRAK_RUSSIAN_LEO_NAVIGATION=this.CELESTRAK_URL_BASE+"musson.txt",this.CELESTRAK_SECTION_4="Scientific",this.CELESTRAK_SPACE_EARTH_SCIENCE=this.CELESTRAK_URL_BASE+"science.txt",this.CELESTRAK_GEODETIC=this.CELESTRAK_URL_BASE+"geodetic.txt",this.CELESTRAK_ENGINEERING=this.CELESTRAK_URL_BASE+"engineering.txt",this.CELESTRAK_EDUCATION=this.CELESTRAK_URL_BASE+"education.txt",this.CELESTRAK_SECTION_5="Miscellaneous",this.CELESTRAK_MILITARY=this.CELESTRAK_URL_BASE+"military.txt",this.CELESTRAK_RADAR_CALLIBRATION=this.CELESTRAK_URL_BASE+"radar.txt",this.CELESTRAK_CUBESATS=this.CELESTRAK_URL_BASE+"cubesat.txt",this.CELESTRAK_OTHER=this.CELESTRAK_URL_BASE+"other.txt",this.CELESTRAK_RESOURCES={Weather:this.CELESTRAK_WEATHER,NOAA:this.CELESTRAK_NOAA,GOES:this.CELESTRAK_GOES,"Earth Resources":this.CELESTRAK_EARTH_RESOURCES,SARSAT:this.CELESTRAK_SARSAT,"Disaster Monitoring":this.CELESTRAK_DISASTER_MONITORING,"Tracking & Data Relay":this.CELESTRAK_TRACKING_DATA_RELAY,ARGOS:this.CELESTRAK_ARGOS,Geostationary:this.CELESTRAK_GEOSTATIONARY,Intelsat:this.CELESTRAK_INTELSAT,Gorizont:this.CELESTRAK_GORIZONT,Raduga:this.CELESTRAK_RADUGA,Molniya:this.CELESTRAK_MOLNIYA,Iridium:this.CELESTRAK_IRIDIUM,Orbcomm:this.CELESTRAK_ORBCOMM,Globalstar:this.CELESTRAK_GLOBALSTAR,"Amateur Radio":this.CELESTRAK_AMATEUR_RADIO,Experimental:this.CELESTRAK_EXPERIMENTAL,Others:this.CELESTRAK_COMMS_OTHER,"GPS Operational":this.CELESTRAK_GPS_OPERATIONAL,"Glonass Operational":this.CELESTRAK_GLONASS_OPERATIONAL,Galileo:this.CELESTRAK_GALILEO,Beidou:this.CELESTRAK_BEIDOU,"Satellite-based Augmentation System":this.CELESTRAK_SATELLITE_AUGMENTATION,"Navy Navigation Satellite System":this.CELESTRAK_NNSS,"Russian LEO Navigation":this.CELESTRAK_RUSSIAN_LEO_NAVIGATION,"Space & Earth Science":this.CELESTRAK_SPACE_EARTH_SCIENCE,Geodetic:this.CELESTRAK_GEODETIC,Engineering:this.CELESTRAK_ENGINEERING,Education:this.CELESTRAK_EDUCATION,Military:this.CELESTRAK_MILITARY,"Radar Callibration":this.CELESTRAK_RADAR_CALLIBRATION,CubeSats:this.CELESTRAK_CUBESATS,Other:this.CELESTRAK_OTHER},this.CELESTRAK_SELECT_SECTIONS=[{section:this.CELESTRAK_SECTION_1,subsection:"Weather"},{section:this.CELESTRAK_SECTION_1,subsection:"NOAA"},{section:this.CELESTRAK_SECTION_1,subsection:"GOES"},{section:this.CELESTRAK_SECTION_1,subsection:"Earth Resources"},{section:this.CELESTRAK_SECTION_1,subsection:"SARSAT"},{section:this.CELESTRAK_SECTION_1,subsection:"Disaster Monitoring"},{section:this.CELESTRAK_SECTION_1,subsection:"Tracking & Data Relay"},{section:this.CELESTRAK_SECTION_1,subsection:"ARGOS"},{section:this.CELESTRAK_SECTION_2,subsection:"Geostationary"},{section:this.CELESTRAK_SECTION_2,subsection:"Intelsat"},{section:this.CELESTRAK_SECTION_2,subsection:"Gorizont"},{section:this.CELESTRAK_SECTION_2,subsection:"Raduga"},{section:this.CELESTRAK_SECTION_2,subsection:"Molniya"},{section:this.CELESTRAK_SECTION_2,subsection:"Iridium"},{section:this.CELESTRAK_SECTION_2,subsection:"Orbcomm"},{section:this.CELESTRAK_SECTION_2,subsection:"Globalstar"},{section:this.CELESTRAK_SECTION_2,subsection:"Amateur Radio"},{section:this.CELESTRAK_SECTION_2,subsection:"Experimental"},{section:this.CELESTRAK_SECTION_2,subsection:"Others"},{section:this.CELESTRAK_SECTION_3,subsection:"GPS Operational"},{section:this.CELESTRAK_SECTION_3,subsection:"Glonass Operational"},{section:this.CELESTRAK_SECTION_3,subsection:"Galileo"},{section:this.CELESTRAK_SECTION_3,subsection:"Beidou"},{section:this.CELESTRAK_SECTION_3,subsection:"Satellite-based Augmentation System"},{section:this.CELESTRAK_SECTION_3,subsection:"Navy Navigation Satellite System"},{section:this.CELESTRAK_SECTION_3,subsection:"Russian LEO Navigation"},{section:this.CELESTRAK_SECTION_4,subsection:"Space & Earth Science"},{section:this.CELESTRAK_SECTION_4,subsection:"Geodetic"},{section:this.CELESTRAK_SECTION_4,subsection:"Engineering"},{section:this.CELESTRAK_SECTION_4,subsection:"Education"},{section:this.CELESTRAK_SECTION_5,subsection:"Military"},{section:this.CELESTRAK_SECTION_5,subsection:"Radar Callibration"},{section:this.CELESTRAK_SECTION_5,subsection:"CubeSats"},{section:this.CELESTRAK_SECTION_5,subsection:"Other"}]}]),angular.module("broadcaster",[]),angular.module("broadcaster").service("broadcaster",["$rootScope",function(a){"use strict";this.GS_ADDED_EVENT="gs.added",this.GS_REMOVED_EVENT="gs.removed",this.GS_UPDATED_EVENT="gs.updated",this.gsAdded=function(b){a.$broadcast(this.GS_ADDED_EVENT,b)},this.gsRemoved=function(b){console.log("@broadcaster.gsRemoved, id = "+b),a.$broadcast(this.GS_REMOVED_EVENT,b)},this.gsUpdated=function(b){a.$broadcast(this.GS_UPDATED_EVENT,b)},this.SC_ADDED_EVENT="sc.added",this.SC_REMOVED_EVENT="sc.removed",this.SC_UPDATED_EVENT="sc.updated",this.scAdded=function(b){a.$broadcast(this.SC_ADDED_EVENT,b)},this.scRemoved=function(b){a.$broadcast(this.SC_REMOVED_EVENT,b)},this.scUpdated=function(b){a.$broadcast(this.SC_UPDATED_EVENT,b)}}]),angular.module("satnet-services",["jsonrpc"]),angular.module("satnet-services").service("satnetRPC",["jsonrpc","$location","$log","$q","$http",function(a,b,c,d,e){"use strict";var f=b.protocol()+"://"+b.host()+":"+b.port()+"/jrpc/";this._configuration=a.newService("configuration",f),this._simulation=a.newService("simulation",f),this._leop=a.newService("leop",f),this._services={"gs.list":this._configuration.createMethod("gs.list"),"gs.add":this._configuration.createMethod("gs.create"),"gs.get":this._configuration.createMethod("gs.getConfiguration"),"gs.update":this._configuration.createMethod("gs.setConfiguration"),"gs.delete":this._configuration.createMethod("gs.delete"),"sc.list":this._configuration.createMethod("sc.list"),"sc.add":this._configuration.createMethod("sc.create"),"sc.get":this._configuration.createMethod("sc.getConfiguration"),"sc.update":this._configuration.createMethod("sc.setConfiguration"),"sc.delete":this._configuration.createMethod("sc.delete"),"user.getLocation":this._configuration.createMethod("user.getLocation"),"tle.celestrak.getSections":this._configuration.createMethod("tle.celestrak.getSections"),"tle.celestrak.getResource":this._configuration.createMethod("tle.celestrak.getResource"),"tle.celestrak.getTle":this._configuration.createMethod("tle.celestrak.getTle"),"sc.getGroundtrack":this._simulation.createMethod("spacecraft.getGroundtrack"),"leop.cfg":this._leop.createMethod("getConfiguration"),"leop.setCfg":this._leop.createMethod("setConfiguration"),"leop.gs.list":this._leop.createMethod("gs.list"),"leop.gs.add":this._leop.createMethod("gs.add"),"leop.gs.remove":this._leop.createMethod("gs.remove"),"leop.ufo.add":this._leop.createMethod("launch.addUnknown"),"leop.ufo.remove":this._leop.createMethod("launch.removeUnknown"),"leop.ufo.identify":this._leop.createMethod("launch.identify"),"leop.ufo.forget":this._leop.createMethod("launch.forget"),"leop.ufo.update":this._leop.createMethod("launch.update")},this.rCall=function(a,b){if(this._services.hasOwnProperty(a)===!1)throw"[satnetRPC] service not found, id = <"+a+">";return c.info("[satnetRPC] Invoked service = <"+a+">, params = "+JSON.stringify(b)),this._services[a](b).then(function(a){return a.data},function(d){var e="[satnetRPC] Error invoking = <"+a+">, with params = <"+JSON.stringify(b)+">, description = <"+JSON.stringify(d)+">";throw c.warn(e),d.message.replace(/Exception\('/g,"").replace(/',\)/g,"")})},this.getUserLocation=function(){return e.get("/configuration/user/geoip").then(function(a){return c.info("[satnet] user@("+JSON.stringify(a.data)+")"),{latitude:parseFloat(a.data.latitude),longitude:parseFloat(a.data.longitude)}})},this.getServerLocation=function(a){return e.post("/configuration/hostname/geoip",{hostname:a}).then(function(b){return c.info("[satnet] server name = "+a+"@("+JSON.stringify(b.data)+")"),{latitude:parseFloat(b.data.latitude),longitude:parseFloat(b.data.longitude)}})},this.readSCCfg=function(a){var b={},c=[this.rCall("sc.get",[a]),this.rCall("sc.getGroundtrack",[a]),this.rCall("tle.celestrak.getTle",[a])];return d.all(c).then(function(a){return b=a[0],b.groundtrack=a[1],b.tle=a[2],angular.extend(b,a[0]),angular.extend(b.groundtrack,a[1]),angular.extend(b.tle,a[2]),b})},this.readAllLEOPGS=function(a){var b=this;return this.rCall("leop.gs.list",[a]).then(function(a){var c=[];return angular.forEach(a.leop_gs_available,function(a){c.push(b.rCall("gs.get",[a]))}),angular.forEach(a.leop_gs_inuse,function(a){c.push(b.rCall("gs.get",[a]))}),d.all(c).then(function(b){var c,d,e,f=[],g=[];for(c=0;c<b.length;c+=1)d=b[c],e=d.groundstation_id,a.leop_gs_available.indexOf(e)>=0?f.push(d):g.push(d);return{leop_gs_available:f,leop_gs_inuse:g}})})}}]),angular.module("map-services",["satnet-services","leaflet-directive"]),angular.module("map-services").constant("T_OPACITY",.125).constant("LAT",37.7833).constant("LNG",-122.4167).constant("MIN_ZOOM",2).constant("MAX_ZOOM",12).constant("ZOOM",7).service("maps",["$q","leafletData","satnetRPC","MIN_ZOOM","MAX_ZOOM","ZOOM","T_OPACITY",function(a,b,c,d,e,f,g){"use strict";this.getMainMap=function(){return b.getMap("mainMap").then(function(a){return{map:a}})},this._updateTerminator=function(a){var b=L.terminator();return a.setLatLngs(b.getLatLngs()),a.redraw(),a},this._createTerminatorMap=function(){var a=this._updateTerminator;return this.getMainMap().then(function(b){var c=L.terminator({fillOpacity:g});return c.addTo(b.map),b.terminator=c,setInterval(function(){a(c)},500),b})},this.createMainMap=function(b){var d=[];return d.push(b?this._createTerminatorMap():this.getMainMap()),d.push(c.getUserLocation()),a.all(d).then(function(a){var b=new L.LatLng(a[1].latitude,a[1].longitude),c=a[0].map;return c.setView(b,f),{map:a[0].map,terminator:a[0].terminator,center:{lat:a[1].latitude,lng:a[1].longitude}}})},this.autocenterMap=function(a,b){var d=this;return c.getUserLocation().then(function(c){d.centerMap(a,c.latitude,c.longitude,b)})},this.centerAtGs=function(a,b,d){var e=this;return c.rCall("gs.get",[b]).then(function(b){return e.centerMap(a,b.groundstation_latlon[0],b.groundstation_latlon[1],d),b})},this.centerMap=function(a,b,c,d){angular.extend(a.center,{lat:b,lng:c,zoom:d}),angular.extend(a.markers,{gs:{lat:b,lng:c,focus:!0,draggable:!0,label:{message:"Drag me!",options:{noHide:!0}}}}),angular.extend(a.layers.baselayers,this.getOSMBaseLayer())},this.getBaseLayers=function(){return{esri_baselayer:{name:"ESRI Base Layer",type:"xyz",url:"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}",layerOptions:{noWrap:!1,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ"}},osm_baselayer:{name:"OSM Base Layer",type:"xyz",url:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{noWrap:!1,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}}}},this.getOSMBaseLayer=function(){return{osm_baselayer:{name:"OSM Base Layer",type:"xyz",url:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}}}},this.getOverlays=function(){return{oms_admin_overlay:{name:"Administrative Boundaries",type:"xyz",url:"http://openmapsurfer.uni-hd.de/tiles/adminb/x={x}&y={y}&z={z}",visible:!0,layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},hydda_roads_labels_overlay:{name:"Roads and Labels",type:"xyz",url:"http://{s}.tile.openstreetmap.se/hydda/roads_and_labels/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Tiles courtesy of <a href="http://openstreetmap.se/" target="_blank">OpenStreetMap Sweden</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},stamen_toner_labels_overlay:{name:"Labels",type:"xyz",url:"http://{s}.tile.stamen.com/toner-labels/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,subdomains:"abcd",attribution:'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},owm_rain_overlay:{name:"Rain",type:"xyz",url:"http://{s}.tile.openweathermap.org/map/rain/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,opacity:.325,attribution:'Map data &copy; <a href="http://openweathermap.org">OpenWeatherMap</a>'}},owm_temperature_overlay:{name:"Temperature",type:"xyz",url:"http://{s}.tile.openweathermap.org/map/temp/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Map data &copy; <a href="http://openweathermap.org">OpenWeatherMap</a>'}}}},this.asString=function(a){return'mapInfo = {"center": '+JSON.stringify(a.center)+', "terminator": '+a.terminator+', "map": '+a.map+"}"}}]),angular.module("marker-models",["map-services"]),angular.module("marker-models").constant("_RATE",1).constant("_SIM_DAYS",1).constant("_GEOLINE_STEPS",1).service("markers",["$log","maps","_SIM_DAYS","_GEOLINE_STEPS",function(a,b,c,d){"use strict";this._mapInfo={},this._mapScope={},this.getScope=function(){if(null===this._mapScope)throw"<_mapScope> has not been set.";return this._mapScope},this.configureMapScope=function(c){this._mapScope=c,angular.extend(this._mapScope,{center:{lat:b.LAT,lng:b.LNG,zoom:b.ZOOM},layers:{baselayers:{},overlays:{}},markers:{},paths:{},maxbounds:{}}),angular.extend(this._mapScope.layers.baselayers,b.getBaseLayers()),angular.extend(this._mapScope.layers.overlays,b.getOverlays()),angular.extend(this._mapScope.layers.overlays,this.getOverlays());var d=this._mapInfo;b.createMainMap(!0).then(function(c){return a.log("[map-controller] Created map = <"+b.asString(c)+">"),angular.extend(d,c),d})},this._KEY_HEADER="MK",this._key_number=0,this._ids2keys={},this.createMarkerKey=function(a){if(void 0!==this._ids2keys[a])return this.getMarkerKey(a);var b=this._KEY_HEADER+this._key_number;return this._key_number+=1,this._ids2keys[a]=b,b},this.getMarkerKey=function(a){return this._ids2keys[a]},this.getServerMarker=function(a){if(null===this._serverMarkerKey)throw"No server has been defined";return console.log("@getServerMarker, gs = "+a),this.getScope().markers[this._serverMarkerKey]},this.getMarker=function(a){return this.getScope().markers[this.getMarkerKey(a)]},this.getOverlays=function(){return{network:{name:"Network",type:"markercluster",visible:!0},groundstations:{name:"Ground Stations",type:"markercluster",visible:!0}}},this._serverMarkerKey=null,this.createServerMarker=function(a,b,c){return this._serverMarkerKey=this.createMarkerKey(a),this.getScope().markers[this._serverMarkerKey]={lat:b,lng:c,focus:!0,draggable:!1,layer:"network",icon:{iconUrl:"/static/images/server-icon.svg",iconSize:[10,10]},label:{message:a,options:{noHide:!0}},groundstations:[],identifier:a},a},this.createConnectorIdentifier=function(a){return"connect:"+a+"_2_"+this.getServerMarker(a).identifier},this.createGSConnector=function(a){var b,c=this.getServerMarker(a),d=this.getMarker(a),e=this.createConnectorIdentifier(a),f={};return b=this.createMarkerKey(e),f[b]={color:"gray",type:"polyline",weight:3,opacity:.25,latlngs:[c,d],identifier:e},angular.extend(this.getScope().paths,f),e},this.createGSMarker=function(a){var b=a.groundstation_id;return this.getScope().markers[this.createMarkerKey(b)]={lat:a.groundstation_latlon[0],lng:a.groundstation_latlon[1],focus:!0,draggable:!1,layer:"groundstations",icon:{iconUrl:"/static/images/gs-icon.svg",iconSize:[10,10]},label:{message:a.groundstation_id,options:{noHide:!0}},identifier:b},this.createGSConnector(b),b},this.updateGSMarker=function(a){var b=a.groundstation_latlon[0],c=a.groundstation_latlon[1],d=this.getMarker(a.groundstation_id);return d.lat!==b&&(d.lat=b),d.lng!==c&&(d.lng=c),a.groundstation_id},this.removeGSMarker=function(a){var b=this.getMarkerKey(this.createConnectorIdentifier(a)),c=this.getMarkerKey(a);delete this.getScope().markers[c],delete this.getScope().paths[b]},this.sc={},this.scLayers=L.layerGroup(),this.trackLayers=L.layerGroup(),this.scStyle={autostart:!0,draggable:!1,icon:L.icon({iconUrl:"/static/images/sc-icon.svg",iconSize:[10,10]})},this.trackStyle={weight:1,opacity:.725,steps:d},this.colors=["green","blue","purple"],this.color_n=0,this.createSCMarkers=function(a){var b,c=a.spacecraft_id,d=this.scStyle,e=this.colors[this.color_n%this.colors.length];return this.color_n+=1,this.trackStyle.color=e,b=this.readTrack(a.groundtrack),{marker:L.Marker.movingMarker(b.positions,b.durations,d).bindLabel(c,{noHide:!0}),track:L.geodesic([b.geopoints],this.trackStyle)}},this.readTrack=function(a){var b,d,e=[],f=[],g=[],h=!0,i=!1,j=1e3*Date.now(),k=1e3*moment().add(c,"days").toDate().getTime();if(null===a||0===a.length)throw"Groundtrack is empty!";for(b=0;b<a.length;b+=1)if(d=a[b],!(d.timestamp<j)){if(d.timestamp>k)break;e.push([d.latitude,d.longitude]),g.push(new L.LatLng(d.latitude,d.longitude)),h!==!0?(f.push((d.timestamp-a[b-1].timestamp)/1e3),i=!0):h=!1}if(i===!1)throw"No valid points in the groundtrack";return{durations:f,positions:e,geopoints:g}},this.addSC=function(a,c){if(this.sc.hasOwnProperty(a))throw"[x-maps] SC Marker already exists, id = "+a;var d=this.createSCMarkers(c);return this.sc[a]=d,this.scLayers.addLayer(d.marker),this.trackLayers.addLayer(d.track),b.getMainMap().then(function(b){return d.track.addTo(b.map),d.marker.addTo(b.map),a})},this.updateSC=function(a,b){if(!this.sc.hasOwnProperty(a))throw"[x-maps] SC Marker does not exist! id = "+a;return console.log("@updateSC, cfg = "+b),a},this.removeSC=function(a){if(!this.sc.hasOwnProperty(a))throw"[x-maps] Marker does NOT exist, id = "+a;var c=this.sc[a];return this.scLayers.removeLayer(c.marker),this.trackLayers.removeLayer(c.track),delete this.sc[a],b.getMainMap().then(function(b){return b.map.removeLayer(c.marker),b.map.removeLayer(c.track),a})}}]),angular.module("x-server-models",["satnet-services","marker-models"]),angular.module("x-server-models").service("xserver",["$location","satnetRPC","markers",function(a,b,c){"use strict";this.initStandalone=function(){var d=a.host();return b.getServerLocation(d).then(function(a){return c.createServerMarker(d,a.latitude,a.longitude)})}}]),angular.module("x-groundstation-models",["broadcaster","satnet-services","marker-models"]),angular.module("x-groundstation-models").service("xgs",["$rootScope","$q","broadcaster","satnetRPC","markers",function(a,b,c,d,e){"use strict";this.initAll=function(){var a=this;return d.rCall("gs.list",[]).then(function(b){return a._initAll(b)})},this.initAllLEOP=function(a){var b=this;return d.rCall("leop.gs.list",[a]).then(function(a){return b._initAll(a.leop_gs_inuse)})},this._initAll=function(a){var c=this,d=[];return angular.forEach(a,function(a){d.push(c.addGS(a))}),b.all(d).then(function(a){var b=[];return angular.forEach(a,function(a){b.push(a)}),b})},this.addGS=function(a){return d.rCall("gs.get",[a]).then(function(a){return e.createGSMarker(a)})},this.updateGS=function(a){d.rCall("gs.get",[a]).then(function(a){return e.updateGSMarker(a)})},this.removeGS=function(a){return console.log("@x-gs: remove, id = "+a),e.removeGSMarker(a)},this.initListeners=function(){var b=this;a.$on(c.GS_ADDED_EVENT,function(a,c){console.log("@on-gs-added-event, event = "+a+", id = "+c),b.addGS(c)}),a.$on(c.GS_REMOVED_EVENT,function(a,c){console.log("@on-gs-removed-event, event = "+a+", id = "+c),b.removeGS(c)}),a.$on(c.GS_UPDATED_EVENT,function(a,c){console.log("@on-gs-updated-event, event = "+a+", id = "+c),b.updateGS(c)})}}]),angular.module("x-spacecraft-models",["broadcaster","satnet-services","marker-models"]),angular.module("x-spacecraft-models").service("xsc",["$rootScope","$q","broadcaster","satnetRPC","markers",function(a,b,c,d,e){"use strict";this.initAll=function(){var a=this;return d.rCall("sc.list",[]).then(function(c){var d=[];return angular.forEach(c,function(b){d.push(a.addSC(b))}),b.all(d).then(function(a){return a})})},this.initAllLEOP=function(){var a=this;return d.rCall("sc.list",[]).then(function(c){var d=[];return angular.forEach(c,function(b){d.push(a.addSC(b))}),b.all(d).then(function(a){return a})})},this.addSC=function(a){return d.readSCCfg(a).then(function(b){return e.addSC(a,b)})},this.updateSC=function(a){return this.removeSC(a).then(function(b){$log.info("[x-sc] (UPDATING) Removed spacecraft, id = "+a),console.log("[x-sc] (UPDATING), data = "+JSON.stringify(b))}),d.readSCCfg(a).then(function(b){return e.updateSC(a,b)})},this.removeSC=function(a){e.removeSC(a).then(function(a){return a})},this.initListeners=function(){var b=this;a.$on(c.SC_ADDED_EVENT,function(a,c){console.log("@on-sc-added-event, event = "+a+", id = "+c),b.addSC(c)}),a.$on(c.SC_UPDATED_EVENT,function(a,c){console.log("@on-sc-updated-event, event = "+a+", id = "+c),b.updateSC(c)}),a.$on(c.SC_REMOVED_EVENT,function(a,c){console.log("@on-sc-removed-event, event = "+a+", id = "+c),b.removeSC(c)})}}]),angular.module("idle",["ui.bootstrap"]),angular.module("idle").controller("idleCtrl",["$scope","$modal",function(a,b){"use strict";function c(){a.warning&&(a.warning.close(),a.warning=null),a.timedout&&(a.timedout.close(),a.timedout=null)}a.started=!0,a.$on("$idleStart",function(){c(),a.warning=b.open({templateUrl:"idle/warningDialog.html",windowClass:"modal-danger"})}),a.$on("$idleEnd",function(){c()}),a.$on("$idleTimeout",function(){c(),a.timedout=b.open({templateUrl:"idle/timedoutDialog.html",windowClass:"modal-danger"})})}]),angular.module("ui-leop-map-controllers",["marker-models","x-spacecraft-models","x-server-models","x-groundstation-models"]),angular.module("ui-leop-map-controllers").controller("LEOPMapController",["$rootScope","$scope","$log","markers","xsc","xserver","xgs",function(a,b,c,d,e,f,g){"use strict";d.configureMapScope(b),e.initListeners(),g.initListeners(),e.initAllLEOP().then(function(a){c.log("[map-controller] Spacecraft ="+JSON.stringify(a))}),f.initStandalone().then(function(b){c.log("[map-controller] Server ="+JSON.stringify(b)),g.initAllLEOP(a.leop_id).then(function(a){c.log("[map-controller] Ground Station(s) = "+JSON.stringify(a))})})}]),angular.module("ui-leop-menu-controllers",["ui.bootstrap","satnet-services"]),angular.module("ui-leop-menu-controllers").controller("LEOPGSMenuCtrl",["$rootScope","$scope","$modal","satnetRPC",function(a,b,c,d){"use strict";b.gsIds=[],b.addGroundStation=function(){var a=c.open({templateUrl:"templates/leop/manageGroundStations.html",controller:"ManageGSModalCtrl",backdrop:"static",size:"lg"});console.log("[leop-menu] Created modalInstance = "+JSON.stringify(a))},b.refreshGSList=function(){d.rCall("leop.gs.list",[a.leop_id]).then(function(a){null!==a&&void 0!==a.leop_gs_inuse&&(b.gsIds=a.leop_gs_inuse.slice(0))})},b.refreshGSList()}]),angular.module("ui-leop-menu-controllers").controller("clusterMenuCtrl",["$scope","$modal","satnetRPC",function(a,b,c){"use strict";a.ufoIds=[],a.openManageCluster=function(){var a=b.open({templateUrl:"templates/leop/manageCluster.html",controller:"manageClusterModal",backdrop:"static"});console.log("[leop-menu] Created modalInstance = "+JSON.stringify(a))},a.refreshUFOList=function(){c.rCall("leop.ufo.list",[]).then(function(b){null!==b&&(console.log("leop.ufo.list >>> data = "+JSON.stringify(b)),a.scIds=b.slice(0))})}}]),angular.module("ui-leop-modalgs-controllers",["broadcaster","satnet-services"]),angular.module("ui-leop-modalgs-controllers").controller("ManageGSModalCtrl",["$rootScope","$scope","$modalInstance","broadcaster","satnetRPC",function(a,b,c,d,e){"use strict";b.gsIds={},b.gsIds.aItems=[],b.gsIds.uItems=[],b.gsIds.toAdd=[],b.gsIds.toRemove=[],b.init=function(){console.log("init, leop_id = "+a.leop_id),e.readAllLEOPGS(a.leop_id).then(function(a){console.log("leop.gs.list, data = "+JSON.stringify(a)),null!==a&&(b.gsIds=a)})},b.selectGs=function(){var a,c;for(void 0===b.gsIds.toAdd&&(b.gsIds.toAdd=[]),a=0;a<b.gsIds.aItems.length;a+=1)c=b.gsIds.aItems[a],b.gsIds.leop_gs_available.splice(b.gsIds.leop_gs_available.indexOf(c),1),b.gsIds.toAdd.indexOf(c)<0&&b.gsIds.toAdd.push(c),b.gsIds.leop_gs_inuse.indexOf(c)<0&&b.gsIds.leop_gs_inuse.push(c);b.gsIds.aItems=[]},b.unselectGs=function(){var a,c;for(void 0===b.gsIds.toRemove&&(b.gsIds.toRemove=[]),a=0;a<b.gsIds.uItems.length;a+=1)c=b.gsIds.uItems[a],b.gsIds.leop_gs_inuse.splice(b.gsIds.leop_gs_inuse.indexOf(c),1),b.gsIds.toRemove.indexOf(c)<0&&b.gsIds.toRemove.push(c),b.gsIds.leop_gs_available.indexOf(c)<0&&b.gsIds.leop_gs_available.push(c);b.gsIds.uItems=[]},b.ok=function(){var f,g,h=[],i=[];if(void 0!==b.gsIds.toAdd){for(f=0;f<b.gsIds.toAdd.length;f+=1)g=b.gsIds.toAdd[f].groundstation_id,h.push(g),d.gsAdded(g);e.rCall("leop.gs.add",[a.leop_id,h]).then(function(a){console.log(">>> updated LEOP = "+JSON.stringify(a))})}if(void 0!==b.gsIds.toRemove){for(f=0;f<b.gsIds.toRemove.length;f+=1)g=b.gsIds.toRemove[f].groundstation_id,i.push(g),d.gsRemoved(g);e.rCall("leop.gs.remove",[a.leop_id,i]).then(function(a){console.log(">>> updated LEOP = "+JSON.stringify(a))})}c.close()},b.cancel=function(){c.close()},b.init()}]),angular.module("ui-leop-modalufo-controllers",["ui.bootstrap","satnet-services"]),angular.module("ui-leop-modalufo-controllers").constant("MAX_OBJECTS",12).constant("MAX_COLUMNS",4).service("oArrays",[function(){"use strict";this.check=function(a,b){if(!a)throw"Array is invalid";if(0===a.length)return!0;if(a[0].hasOwnProperty(b)===!1)throw"Wrong property";return!0},this.indexOf=function(a,b,c){this.check(a,b);var d;for(d=0;d<a.length;d+=1)if(a[d][b]===c)return d;throw"Pair not found in array, = ("+b+", "+c+")"},this.getObject=function(a,b,c){var d=this.indexOf(a,b,c);return{index:d,object:a[d]}},this.findMaxTuple=function(a,b){this.check(a,b);var c,d=-1,e=0;for(c=0;c<a.length;c+=1)a[c][b]>d&&(d=a[c][b],e=c);return{index:e,value:d}},this.parseInt=function(a,b){this.check(a,b);var c;for(c=0;c<a.length;c+=1)a[c][b]=parseInt(a[c][b],10);return a},this.split=function(a,b){if(null===a)throw"array is null";if(1>b)throw"max_columns should be > 1, actual = "+b;if(void 0===a)return[];if(a.length<=b)return a;var c,d,e,f,g=Math.ceil(a.length/b),h=new Array(g);for(c=0;g>c;c+=1){for(e=[],d=0;b>d&&(f=c*b+d,f<a.length);d+=1)e[d]=a[f];h[c]=e}return h},this.addProperty=function(a,b,c){if(null===a)throw"Array is null";if(0===a.length)return!0;if(null===b)throw"Key is null";if(0===b.length)throw"Key is blank";if(null===c)throw"Value is null";if(a[0].hasOwnProperty(b)===!0)throw"Property already defined, k = "+b;var d;for(d=0;d<a.length;d+=1)a[d][b]=c;return a},this.insertSorted=function(a,b,c){if(this.check(a,b),null===c)throw"Element is null";if(c.hasOwnProperty(b)===!1)throw"Invalid element";var d;for(d=0;d<a.length&&!(a[d][b]>c[b]);d+=1);return a.splice(d,0,c),a},this.array2dict=function(a,b){if(this.check(a,b),!b)throw"Property is null";var c,d={},e={};return angular.forEach(a,function(a){angular.extend(d,a),c=a[b],e[c]=d,d={}}),e}}]).service("xDicts",[function(){"use strict";this.check=function(a,b){if(!a)throw"<Dict> is invalid";if(!b)throw"<property> is invalid";return!0},this.findMaxTuple=function(a,b){this.check(a,b);var c,d,e=0,f=0,g=0;for(c in a)if(a.hasOwnProperty(c)){if(g+=1,e=a[c][b],f>e)continue;f=e,d=c}return 0===g?[void 0,0]:[d,f]},this.isEmpty=function(a){this.check(a,"any");var b;for(b in a)if(a.hasOwnProperty(b))return!1;return!0},this.size=function(a){this.check(a,"any");var b,c=0;for(b in a)a.hasOwnProperty(b)&&(c+=1);return c}}]).controller("manageClusterModal",["$rootScope","$scope","$log","$modalInstance","satnetRPC","oArrays","xDicts","MAX_OBJECTS",function(a,b,c,d,e,f,g,h){"use strict";b.cluster={},b._init=function(a){b.cluster.identifier=a.identifier,b.cluster.tle_l1=a.tle_l1,b.cluster.tle_l2=a.tle_l2,b.cluster.date=a.date,b.cluster.max_objects=h,b.cluster.no_objects=0,b.cluster.edit=!1,f.parseInt(a.ufos,"object_id"),b.cluster.ufos=b._objArr2Dict(a.ufos),b.cluster.no_ufos=b._ufosSize(),b.cluster.editing={},b.cluster.no_editing=0,b.cluster.identified=b._objArr2Dict(a.identified),b.cluster.no_identified=b._identifiedSize()},b._objArr2Dict=function(a){return f.array2dict(a,"object_id")},b._biggestUfo=function(){var a=b.cluster.ufos,c=g.findMaxTuple(a,"object_id");return c[1]},b._biggestIded=function(){var a=b.cluster.identified,c=g.findMaxTuple(a,"object_id");return c[1]},b._nextObjectId=function(){var a=b._biggestUfo(),c=b._biggestIded();return a>c?parseInt(a,10)+1:parseInt(c,10)+1},b._isUfosEmpty=function(){return g.isEmpty(b.cluster.ufos)},b._ufosSize=function(){return g.size(b.cluster.ufos)},b._addUfo=function(a){b.cluster.ufos[a]={object_id:a},b.cluster.no_ufos+=1},b._removeUfo=function(a){delete b.cluster.ufos[a],b.cluster.no_ufos-=1},b._getUfo=function(a){return b.cluster.ufos[a]},b._addEditingUfo=function(a){b.cluster.editing[a]={object_id:a,tle_l1:"",tle_l2:"",callsign:"",edit:!0,past:"ufo"},b.cluster.no_editing+=1},b._addEditingIded=function(a,c){b.cluster.editing[a]={object_id:a,tle_l1:c.tle_l1,tle_l2:c.tle_l2,callsign:c.callsign,edit:!0,past:"identified"},b.cluster.no_editing+=1},b._removeEditing=function(a){delete b.cluster.editing[a],b.cluster.no_editing-=1},b._getEditing=function(a){return b.cluster.editing[a]},b._disableEditing=function(a){b.cluster.editing[a].edit=!1},b._identifiedSize=function(){return g.size(b.cluster.identified)},b._addIdentified=function(a,c){b.cluster.identified[a]={object_id:a,tle_l1:c.tle_l1,tle_l2:c.tle_l2,callsign:c.callsign},b.cluster.no_identified+=1},b._removeIdentified=function(a){delete b.cluster.identified[a],b.cluster.no_identified-=1},b._getIdentified=function(a){return b.cluster.identified[a]},b._updateNoObjects=function(){b.cluster.no_objects=b.cluster.no_ufos+b.cluster.no_editing+b.cluster.no_identified},b.init=function(){var c=b;e.rCall("leop.cfg",[a.leop_id]).then(function(a){console.log("[modal-ufo] cluster cfg = "+JSON.stringify(a)),c._init(a)
})},b.add=function(){var d=b._nextObjectId(),f=b;e.rCall("leop.ufo.add",[a.leop_id,d]).then(function(a){c.info("[modal-ufo] New ufo, id = "+a),f._addUfo(d)})},b.remove=function(){var d=b._biggestUfo(),f=b;e.rCall("leop.ufo.remove",[a.leop_id,d]).then(function(a){c.info("[modal-ufo] Removed ufo, id = "+a),f._removeUfo(d)})},b.editingUfo=function(a){b._addEditingUfo(a),b._removeUfo(a)},b.editingIded=function(a){var c=b._getIdentified(a);b._addEditingIded(a,c),b._removeIdentified(a)},b.cancel=function(a){var c=b._getEditing(a);"ufo"===c.past?b._addUfo(a):b._addIdentified(a,c),b._removeEditing(a)},b.save=function(a){var c=b._getEditing(a);b._disableEditing(a),"ufo"===c.past?b._save("leop.ufo.identify",a,c):b._save("leop.ufo.update",a,c)},b._save=function(d,f,g){var h="[modal-ufo] Wrong configuration, ex = ";console.log(">>> object = "+JSON.stringify(g)),e.rCall(d,[a.leop_id,f,g.callsign,g.tle_l1,g.tle_l2]).then(function(a){c.info("[modal-ufo] <Object#"+a+"> SAVED!"),b._addIdentified(f,g),b._removeEditing(f)},function(a){h+=JSON.stringify(a),c.warn(h),alert(h)===!1&&c.warn(h)})},b.forget=function(d){var f="Are you sure that you want to return <Object#"+d+"> back to the UFO list?",g="[modal-ufo] Wrong configuration, ex = ";return confirm(f)===!1?void c.warn("[modal-ufo] object kept identified."):void e.rCall("leop.ufo.forget",[a.leop_id,d]).then(function(a){c.info("[modal-ufo] <Object#"+a+"> back as a UFO."),b._addUfo(d),b._removeIdentified(d)},function(a){g+=JSON.stringify(a),c.warn(g),alert(g)===!1&&c.warn(g)})},b.editCluster=function(){b.cluster.edit=!0},b.saveCluster=function(){b.cluster.edit=!1},b.cancelCluster=function(){b.cluster.edit=!1},b.hide=function(){d.close()},b.init()}]),angular.module("ui-map-controllers",["marker-models","x-groundstation-models","x-spacecraft-models","x-server-models"]),angular.module("ui-map-controllers").controller("MapController",["$scope","$log","markers","xgs","xsc","xserver",function(a,b,c,d,e,f){"use strict";c.configureMapScope(a),d.initListeners(),e.initListeners(),e.initAll().then(function(a){b.log("[map-controller] Spacecraft ="+JSON.stringify(a))}),f.initStandalone().then(function(a){b.log("[map-controller] Server ="+JSON.stringify(a)),d.initAll().then(function(a){b.log("[map-controller] Ground Station(s) = "+JSON.stringify(a))})})}]),angular.module("ui-menu-controllers",["ui.bootstrap","satnet-services"]),angular.module("ui-menu-controllers").controller("GSMenuCtrl",["$scope","$modal","satnetRPC",function(a,b,c){"use strict";a.gsIds=[],a.addGroundStation=function(){var a=b.open({templateUrl:"templates/addGroundStation.html",controller:"AddGSModalCtrl",backdrop:"static"});console.log("Created modalInstance = "+a)},a.editGroundStation=function(a){var c=b.open({templateUrl:"templates/editGroundStation.html",controller:"EditGSModalCtrl",backdrop:"static",resolve:{groundstationId:function(){return a}}});console.log("Created modalInstance = "+c)},a.refreshGSList=function(){c.rCall("gs.list",[]).then(function(b){null!==b&&(a.gsIds=b.slice(0))})},a.refreshGSList()}]),angular.module("ui-menu-controllers").controller("SCMenuCtrl",["$scope","$modal","satnetRPC",function(a,b,c){"use strict";a.scIds=[],a.addSpacecraft=function(){var a=b.open({templateUrl:"templates/addSpacecraft.html",controller:"AddSCModalCtrl",backdrop:"static"});console.log("Created modalInstance = "+a)},a.editSpacecraft=function(a){var c=b.open({templateUrl:"templates/editSpacecraft.html",controller:"EditSCModalCtrl",backdrop:"static",resolve:{spacecraftId:function(){return a}}});console.log("Created modalInstance = "+c)},a.refreshSCList=function(){c.rCall("sc.list",[]).then(function(b){null!==b&&(console.log("sc.list >>> data = "+JSON.stringify(b)),a.scIds=b.slice(0))})},a.refreshSCList()}]),angular.module("ui-menu-controllers").controller("ExitMenuCtrl",["$scope","$log",function(a,b){"use strict";a.home=function(){b.info("Exiting...")}}]),angular.module("ui-modalgs-controllers",["ui.bootstrap","nya.bootstrap.select","leaflet-directive","satnet-services","map-services","broadcaster"]),angular.module("ui-modalgs-controllers").constant("GS_ELEVATION",15).controller("AddGSModalCtrl",["$scope","$log","$modalInstance","satnetRPC","maps","broadcaster","GS_ELEVATION",function(a,b,c,d,e,f,g){"use strict";a.gs={identifier:"",callsign:"",elevation:g},angular.extend(a,{center:{},markers:{},layers:{baselayers:{},overlays:{}}}),e.autocenterMap(a,8).then(function(){b.info("[map-ctrl] GS Modal dialog loaded.")}),a.ok=function(){var e=[a.gs.identifier,a.gs.callsign,a.gs.elevation.toFixed(2),a.markers.gs.lat.toFixed(6),a.markers.gs.lng.toFixed(6)];d.rCall("gs.add",e).then(function(a){var d=a.groundstation_id;b.info("[map-ctrl] GS added, id = "+d),f.gsAdded(d),c.close()},function(a){window.alert(a)})},a.cancel=function(){c.close()}}]),angular.module("ui-modalgs-controllers").constant("GS_ELEVATION",15).controller("EditGSModalCtrl",["$scope","$log","$modalInstance","satnetRPC","broadcaster","maps","groundstationId",function(a,b,c,d,e,f,g){"use strict";a.gs={identifier:"",callsign:"",elevation:0},angular.extend(a,{center:{},markers:{},layers:{baselayers:{},overlays:{}}}),f.centerAtGs(a,g,8).then(function(c){a.gs.identifier=c.groundstation_id,a.gs.callsign=c.groundstation_callsign,a.gs.elevation=c.groundstation_elevation,b.info("[map-ctrl] GS Modal dialog loaded.")}),a.update=function(){var f={groundstation_id:g,groundstation_callsign:a.gs.callsign,groundstation_elevation:a.gs.elevation.toFixed(2),groundstation_latlon:[a.markers.gs.lat.toFixed(6),a.markers.gs.lng.toFixed(6)]};d.rCall("gs.update",[g,f]).then(function(a){b.info("[map-ctrl] GS updated, id = "+a),e.gsUpdated(g),c.close()},function(a){window.alert(a)})},a.cancel=function(){c.close()},a.erase=function(){confirm("Delete this ground station?")===!0&&d.rCall("gs.delete",[g]).then(function(a){b.info("[modalgs] GS removed, id = "+JSON.stringify(a)),e.gsRemoved(a),c.close()},function(a){window.alert(a)})}}]),angular.module("ui-modalsc-controllers",["ui.bootstrap","nya.bootstrap.select","celestrak-services","satnet-services","broadcaster"]),angular.module("ui-modalsc-controllers").controller("AddSCModalCtrl",["$scope","$log","$modalInstance","satnetRPC","celestrak","broadcaster",function(a,b,c,d,e,f){"use strict";a.sc={identifier:"",callsign:"",tlegroup:"",tleid:""},a.tlegroups=e.CELESTRAK_SELECT_SECTIONS,a.tles=[],a.initTles=function(b){d.rCall("tle.celestrak.getResource",[b]).then(function(b){a.tles=b.tle_list.slice(0),console.log("$scope.tles = "+JSON.stringify(a.tles))}),a.sc.tlegroup=b},a.groupChanged=function(b){d.rCall("tle.celestrak.getResource",[b.subsection]).then(function(b){a.tles=b.tle_list.slice(0)})},a.ok=function(){var e=[a.sc.identifier,a.sc.callsign,a.sc.tleid.spacecraft_tle_id];d.rCall("sc.add",e).then(function(a){b.info("[map-ctrl] SC added, id = "+a.spacecraft_id),f.scAdded(a.spacecraft_id)}),c.close()},a.cancel=function(){c.close()}}]),angular.module("ui-modalsc-controllers").controller("EditSCModalCtrl",["$scope","$log","$modalInstance","satnetRPC","celestrak","spacecraftId","broadcaster",function(a,b,c,d,e,f,g){"use strict";a.sc={identifier:f,callsign:"",tlegroup:"",tleid:"",savedTleId:""},a.tlegroups=e.CELESTRAK_SELECT_SECTIONS,a.tles=[],d.rCall("sc.get",[f]).then(function(b){a.sc.identifier=f,a.sc.callsign=b.spacecraft_callsign,a.sc.savedTleId=b.spacecraft_tle_id}),a.initTles=function(b){d.rCall("tle.celestrak.getResource",[b]).then(function(b){a.tles=b.tle_list.slice(0)}),a.sc.tlegroup=b},a.groupChanged=function(b){d.rCall("tle.celestrak.getResource",[b.subsection]).then(function(b){a.tles=b.tle_list.slice(0)})},a.update=function(){var e={spacecraft_id:f,spacecraft_callsign:a.sc.callsign,spacecraft_tle_id:a.sc.tleid.id};d.rCall("sc.update",[f,e]).then(function(a){b.info("[map-ctrl] SC updated, id = "+a),g.scUpdated(a)}),c.close()},a.cancel=function(){c.close()},a.erase=function(){confirm("Delete this spacecraft?")===!0&&(d.rCall("sc.delete",[f]).then(function(a){b.info("[map-ctrl] Spacecraft removed, id = "+JSON.stringify(a)),g.scRemoved(a)}),c.close())}}]),angular.module("countdownDirective",["satnet-services"]).constant("COUNTDOWN_END_EV","launch-countdown-end").controller("countdownCtrl",["$rootScope","$scope","$timeout","satnetRPC",function(a,b,c,d){"use strict";b._timer={},b._counter=0,b.datems=0,b.label="Time to launch",b.beat=function(){b._timer=c(function(){console.log(b._counter),b._counter-=1,b.datems=1e3*b._counter,0===b._counter?(a.$broadcast("launch-countdown-end"),c.cancel(b._timer)):b.beat()},1e3)},b.init=function(){d.rCall("leop.cfg",[a.leop_id]).then(function(a){var c=moment(a.date),d=moment(),e=moment.duration(c.diff(d));b._counter=e,b.beat()})},b.init()}]).directive("countdown",function(){"use strict";return{restrict:"E",templateUrl:"templates/countdown/countdown.html"}}),angular.module("logNotifierDirective",[]).constant("TIMESTAMP_FORMAT","HH:mm:ss.sss").controller("logNotifierCtrl",["$scope","$filter","TIMESTAMP_FORMAT",function(a,b,c){"use strict";a.eventLog=[],a.logEvent=function(d,e){a.eventLog.unshift({type:d.name,timestamp:b("date")(new Date,c),msg:e})},a.$on("logEvent",function(b,c){a.logEvent(b,c)}),a.$on("infoEvent",function(b,c){a.logEvent(b,c)}),a.$on("warnEvent",function(b,c){a.logEvent(b,c)}),a.$on("errEvent",function(b,c){a.logEvent(b,c)}),a.$on("debEvent",function(b,c){a.logEvent(b,c)})}]).directive("logNotifier",function(){"use strict";return{restrict:"E",templateUrl:"templates/notifier/logNotifier.html"}});var app=angular.module("satnet-ui",["jsonrpc","ngCookies","ngResource","leaflet-directive","remoteValidation","nya.bootstrap.select","ngIdle","broadcaster","map-services","celestrak-services","satnet-services","marker-models","x-server-models","x-spacecraft-models","x-groundstation-models","ui-map-controllers","ui-menu-controllers","ui-modalsc-controllers","ui-modalgs-controllers","idle","logNotifierDirective"]);angular.module("broadcaster"),angular.module("map-services"),angular.module("satnet-services"),angular.module("celestrak-services"),angular.module("marker-models"),angular.module("x-server-models"),angular.module("x-spacecraft-models"),angular.module("x-groundstation-models"),angular.module("ui-map-controllers"),angular.module("ui-menu-controllers"),angular.module("ui-modalsc-controllers"),angular.module("ui-modalgs-controllers"),angular.module("logNotifierDirective"),app.config(["$keepaliveProvider","$idleProvider","$provide",function(a,b,c){"use strict";b.idleDuration(5),b.warningDuration(5),a.interval(10),c.decorator("$log",function(a){var b=null;return{setScope:function(a){b=a},log:function(c){console.log("@log event"),a.log.apply(null,["[log] "+c]),b.$broadcast("logEvent",c)},info:function(c){console.log("@info event"),a.info.apply(null,["[info] "+c]),b.$broadcast("infoEvent",c)},error:function(){console.log("@error event"),a.error.apply(null,arguments),b.$broadcast("errEvent",arguments)},warn:function(c){console.log("@warn event"),a.warn.apply(null,["[warn] "+c]),b.$broadcast("warnEvent",c)}}})}]),app.run(["$rootScope","$log","$http","$cookies","$idle",function(a,b,c,d,e){"use strict";b.setScope(a),c.defaults.headers.post["X-CSRFToken"]=d.csrftoken,e.watch()}]);var app=angular.module("leop-ui",["jsonrpc","ngCookies","ngResource","leaflet-directive","remoteValidation","angular-loading-bar","ui.bootstrap.datetimepicker","broadcaster","map-services","celestrak-services","satnet-services","marker-models","x-server-models","x-spacecraft-models","x-groundstation-models","ui-leop-map-controllers","ui-menu-controllers","ui-leop-menu-controllers","ui-leop-modalufo-controllers","ui-leop-modalgs-controllers","logNotifierDirective","countdownDirective"]);angular.module("broadcaster"),angular.module("map-services"),angular.module("celestrak-services"),angular.module("satnet-services"),angular.module("marker-models"),angular.module("x-server-models"),angular.module("x-spacecraft-models"),angular.module("x-groundstation-models"),angular.module("ui-leop-map-controllers"),angular.module("ui-menu-controllers"),angular.module("ui-leop-menu-controllers"),angular.module("ui-leop-modalufo-controllers"),angular.module("ui-leop-modalgs-controllers"),angular.module("logNotifierDirective"),angular.module("countdownDirective"),app.config(["$provide",function(a){"use strict";a.decorator("$log",function(a){var b=null;return{setScope:function(a){b=a},log:function(c){console.log("@log event"),a.log.apply(null,["[log] "+c]),b.$broadcast("logEvent",c)},info:function(c){console.log("@info event"),a.info.apply(null,["[info] "+c]),b.$broadcast("infoEvent",c)},error:function(){console.log("@error event"),a.error.apply(null,arguments),b.$broadcast("errEvent",arguments)},warn:function(c){console.log("@warn event"),a.warn.apply(null,["[warn] "+c]),b.$broadcast("warnEvent",c)}}})}]),app.run(["$rootScope","$log","$http","$cookies","$window",function(a,b,c,d,e){"use strict";b.setScope(a),c.defaults.headers.post["X-CSRFToken"]=d.csrftoken,a.leop_id=e.leop_id}]);